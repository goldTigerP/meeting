# 设置最低CMake版本要求
cmake_minimum_required(VERSION 3.10)

# 设置项目名称和版本
project(meeting VERSION 1.0.0 LANGUAGES CXX)

# 设置C++标准
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# 设置编译器特定的编译选项
if(WIN32)
    # Windows特定配置
    set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)
    # 对于MSVC编译器
    if(MSVC)
        add_compile_options(/W4)  # 启用警告级别4
        add_compile_options(/utf-8)  # 使用UTF-8编码
    endif()
elseif(UNIX AND NOT APPLE)
    # Linux特定配置
    add_compile_options(-Wall -Wextra -Wpedantic)  # 启用更多警告
endif()

# 设置构建类型的默认值
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release)
endif()

# Debug和Release模式的特殊设置
if(CMAKE_BUILD_TYPE STREQUAL "Debug")
    add_definitions(-DDEBUG)
    if(WIN32 AND MSVC)
        add_compile_options(/Od)  # 禁用优化
    else()
        add_compile_options(-O0 -g)  # 禁用优化，启用调试信息
    endif()
else()
    add_definitions(-DNDEBUG)
    if(WIN32 AND MSVC)
        add_compile_options(/O2)  # 优化
    else()
        add_compile_options(-O2)  # 优化
    endif()
endif()

# 查找Qt5库
find_package(Qt5 REQUIRED COMPONENTS Core Widgets Network)

# 启用Qt5的自动MOC (Meta-Object Compiler)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTORCC ON)

# 添加源文件目录
file(GLOB_RECURSE SOURCES "source/*.cpp" "source/*.c")
file(GLOB_RECURSE HEADERS "source/*.h" "source/*.hpp")

# 创建可执行文件
add_executable(${PROJECT_NAME} ${SOURCES} ${HEADERS})

# 设置包含目录
target_include_directories(${PROJECT_NAME} PRIVATE 
    ${CMAKE_CURRENT_SOURCE_DIR}/source
)

# 链接Qt5库
target_link_libraries(${PROJECT_NAME} PRIVATE 
    Qt5::Core 
    Qt5::Widgets
    Qt5::Network
)

# 链接系统库（如果需要）
if(WIN32)
    # Windows特定的库
    # target_link_libraries(${PROJECT_NAME} PRIVATE ws2_32)  # 如果需要网络功能
elseif(UNIX AND NOT APPLE)
    # Linux特定的库
    target_link_libraries(${PROJECT_NAME} PRIVATE pthread)  # 线程库
endif()

# 设置输出目录
set_target_properties(${PROJECT_NAME} PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin
    RUNTIME_OUTPUT_DIRECTORY_DEBUG ${CMAKE_BINARY_DIR}/bin
    RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_BINARY_DIR}/bin
)

# 安装配置
install(TARGETS ${PROJECT_NAME}
    RUNTIME DESTINATION bin
)

# 添加自定义目标
# 运行应用程序
add_custom_target(run
    COMMAND ${CMAKE_BINARY_DIR}/bin/${PROJECT_NAME}
    DEPENDS ${PROJECT_NAME}
    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
    COMMENT "Running ${PROJECT_NAME}"
)

# 清理目标（除了默认的clean）
add_custom_target(distclean
    COMMAND ${CMAKE_COMMAND} -E remove_directory ${CMAKE_BINARY_DIR}/bin
    COMMAND ${CMAKE_COMMAND} -E remove_directory ${CMAKE_BINARY_DIR}/CMakeFiles
    COMMAND ${CMAKE_COMMAND} -E remove ${CMAKE_BINARY_DIR}/CMakeCache.txt
    COMMAND ${CMAKE_COMMAND} -E remove ${CMAKE_BINARY_DIR}/cmake_install.cmake
    COMMAND ${CMAKE_COMMAND} -E remove ${CMAKE_BINARY_DIR}/Makefile
    COMMENT "Cleaning all build files"
)

# 重新构建目标
add_custom_target(rebuild
    COMMAND ${CMAKE_COMMAND} --build ${CMAKE_BINARY_DIR} --target clean
    COMMAND ${CMAKE_COMMAND} --build ${CMAKE_BINARY_DIR}
    COMMENT "Rebuilding project"
)

# 打印一些有用的信息
message(STATUS "Project: ${PROJECT_NAME}")
message(STATUS "Version: ${PROJECT_VERSION}")
message(STATUS "Build type: ${CMAKE_BUILD_TYPE}")
message(STATUS "C++ standard: ${CMAKE_CXX_STANDARD}")
message(STATUS "Compiler: ${CMAKE_CXX_COMPILER_ID}")
message(STATUS "System: ${CMAKE_SYSTEM_NAME}")
message(STATUS "Qt5 Core version: ${Qt5Core_VERSION}")
message(STATUS "Qt5 Widgets version: ${Qt5Widgets_VERSION}")